{
  "name": "restifizer",
  "version": "0.1.5",
  "description": "Restful service with mongodb",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vedi/restifizer.git"
  },
  "keywords": [
    "node.js",
    "rest",
    "restful",
    "express",
    "node",
    "mongo",
    "mongodb",
    "mongoose",
    "nosql"
  ],
  "dependencies": {
    "lodash": "~2.4.1",
    "http-statuses": "~0.1.x",
    "mongoose": "3.8.x",
    "mmmagic": "~0.3.6",
    "q": "~1.0.1"
  },
  "author": {
    "name": "Fedor Shubin"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vedi/restifizer/issues"
  },
  "homepage": "https://github.com/vedi/restifizer",
  "_id": "restifizer@0.1.2",
  "dist": {
    "shasum": "1297c801b1c7ea120e29ddf9a347afc4201bcdc6"
  },
  "_from": "restifizer@",
  "_resolved": "https://registry.npmjs.org/restifizer/-/restifizer-0.0.24.tgz",
  "readme": "> We are working hard to create and imrove documentation. Some sections still are blank. But if you have exact questions or ideas how we can improve documentation, create a ticket with it here: https://github.com/vedi/restifizer/issues\n\n> Any feedback is appreciated. \n\nRestifizer\n==========\n\nRestifizer - it's a way to significantly simplify creation of full-functional RESTful services, using MongoDB as database.\n\nThe key feature of the module - it's very coupled to mongoose (MongoDB module) \nas result it allows to make prototyping of the services as soon as it's possible. \nAlmost all the features of mongoose becomes available in your server out of the box.\nThere is a list of some of these features:\n * querying engine - it literally means you can define MongoDB queries in your http-requests,\n * aggregation - you can use rich aggregation abilities of MongoDB in your http-requests,\n * nested objects and arrays - since resources are just MongoDB docs, you can easily use any nested structures supported,\n * data population - you can easily define what the additional data should fetched and populated (JOIN) in your resource.\n\n> Such features on one hand allow your service to be developed extremely fast, but on other hand you always should remember, \nyou need to solve all possible performance imapacts before comming production. \nFor example you sould allow filtering by indexed fields only. By default it's allowed for each ones.     \n\n*Restifizer* supports 2 kinds of data: \n  * resources - when client pass text data and get json back,\n  * files - when uploading/downloading of files. \n\n## Resources\n\nIt's a core of RESTful services. Resources are available at a specific path on the server. For example: \"/api/users\".\n\n## Supported HTTP methods\n\nIn the best traditions of REST-genre the most of the actions with resource can be \"expresed\" with http-methods. \nRestifizer supports following methods:\n    * GET - selects a set of resources or a resource if a key is specified (see `select`, `selectOne`),\n    * POST - saves new instance of resource on the server (see `insert`),\n    * PUT - replaces existing instance of resource with data provided in request (see `update`),\n    * PATCH - updates fields of existing instance of resource with values provided in request (see `partialUpdate`).\n    * DELETE - removes existing instance of resource from the server (see 'delete'). \n\n### select\n\n> I use `httpie` (https://github.com/jakubroztocil/httpie) as a command line tool to test the servers. You can use any, but all the examples are created with syntax of `httpie`. Anyway it's recognizable.\n\nExample:\n\n```\nhttp GET 'localhost:3000/api/users?filter={\"username\": \"test\"}&fields=username,createdAt&orderBy={\"username\": -1}'\n```\n\nIt allows to get the list of resources according provided criteria. If no criteria provided, it return the first page\nof `maxPageSize` with all available fields. \n\n#### Supported params\n\n##### filter\n\nIt's json value containing any valid mongo db query. See http://docs.mongodb.org/manual/reference/glossary/#term-query for details. \nExample: \n{\"sex\": \"M\", age: { $gt: 18 } }}\n\n###### regexp values\n\nYou can use regex values in filter. As we pass JSON in this param it's not possible to use regular expression objects (/pattern/).\nYou should replace it with `$regex` operator. See http://docs.mongodb.org/manual/reference/operator/query/regex/ for details.\n\n##### fields\n\nComma separated list of field names.\n\n##### orderBy\n\nIt's json value built according MongoDB rules. Use 1 for an ascending sorting, and -1 for a descending sorting\nExample:\n{\"username\": 1, \"age\": -1}\n\nSee http://docs.mongodb.org/manual/reference/method/cursor.sort/#cursor.sort for details.\n\n##### per_page\n\nThe maximum number of records in the response. `defaultPerPage` is used by default, and maximum is limited with `maxPerPage`.\n\nSee http://docs.mongodb.org/manual/reference/method/cursor.limit/#cursor.limit for details.\n\n##### page\n\nA number of page to return, `1` if a value is not provided. We skip `(page - 1) * per_page` records in the query to achieve that. \nSee http://docs.mongodb.org/manual/reference/method/cursor.skip/#cursor.skip for details.\n\n##### q\n\nParameter for q-searches. It can be any string value. \n`restifizer` will use it to build the following condition for every value in your `qFields`:\n```\n{$regex: '.*' + q + \".*\", $options: 'i'}\n```\n\nExample:\n```\nhttp GET 'localhost:3000/api/users?q=John'\n```\n\nSee q-search section for details.\n\n### selectOne\n\n```\nhttp GET 'localhost:3000/api/users/<id>'\n```\n\nIt allows to get resource by `id` provided as the last part of URL. \n\n### insert\n\n```\nhttp POST 'localhost:3000/api/users' username=test password=pass\n```\n\nIt allows to add new resources to the server. You can provide field values in body with json, or as form params. \n\n\n### update\n\n```\nhttp PUT 'localhost:3000/api/users/<id>' username=test password=pass\n```\n\nIt completely replaces resource with provided `id` with new one specifided in the request. You can provide field values in body with json, or as form params. \nBe careful if no value for a field provided, it will be set to undefined. \n\n### partialUpdate\n\n```\nhttp PATCH 'localhost:3000/api/users/<id>' password=pass\n```\n\nIt partially update resource with provided `id` with data from the request. You can provide field values in body with json, or as form params. \n\n\n### delete\n\n```\nhttp DELETE 'localhost:3000/api/users/<id>'\n```\n\nIt removes the record by `id`.\n\n## Aggregation\n\nAs an extension to standard rest-kit restifizer supports some built-in MongoDB aggregations.\n\n### count\n\n```\nhttp GET 'localhost:3000/api/users/count?filter={age: { $gt: 18 } }}'\n```\n\nIt allows do get count of records of specified resource. See http://docs.mongodb.org/manual/reference/method/db.collection.count/ for details.\n\n#### Supported params\n\n##### filter\n\nIt's json value containing any valid mongo db query. See http://docs.mongodb.org/manual/reference/glossary/#term-query for details. \nExample: \n{\"sex\": \"M\", age: { $gt: 18 } }}\n\n### aggregate\n\n```\nhttp GET 'localhost:3000/api/users/aggregate?filter={age: { $gt: 18 } }}'\n```\n\nIt performs aggregation of the resource records. See http://docs.mongodb.org/manual/aggregation/ for details.\n\nTBD\n\n## Paging\n\nIt relates to getting the list of resources. Every such response is limited with paging rules:\n # an user specifies `per_page` and `page` params in URL,\n # if params are not provided default rules are applied (see `restifizerOptions.defaultPerPage`),\n # if `per_page` greater then `restifizerOptions.maxPerPage`, value of `maxPerPage` is used. \n\n## Controllers\n\nControllers are the way to provide needed configuration for your resource and to customize its behaviour.\n \n### Fields\n\n#### ModelClass\n\nAny resource is bound to mongoose model, and this param is a way to specify, what the model your resource uses.\n\n#### path\n\nWith this option you specify the paths, where resource will be available at. There are 2 important points:\n   * it can be a string, or an array if resource is available at several paths,\n   * you can provide params in paths, and they will be automatically bound to params of requests.\n\nFor instance, you can write:\n```\npath: ['/api/appData', '/api/users/:owner/appData']\n```\nand in the case if an user requests data at `/api/users/543d2605e21f85d73b060979/appData`, appData will be filtered by \nprovided value of `owner`.\n\n#### fields\n\nBy default all the fields you defined in your model schema (without fields with name starting from \"__\") are available in your resource.\nProviding this params are you able exclude some fields from the resource, or add new calculated fields.\n\n#### q-search\n\nQ-search allows to search data without specifying exact fields of search. Just specify in your controller searchable fields:\n \n```\nqFields: [\"login\", \"firstName\", \"lastName\"]\n```\n\nand set `q` param of your GET request (see `q` for details).\n\n### Options\n\n#### Option inheritence\n\nYou are able to customize the behaviour of your controllers very much. And we did all our best to make this process as simple as it's posible.\nThat's why you're able to specify option in one of the methods, and `restifizer` will apply inheritence rules to the options of other methods.\n  \nThere are following rules:\n```\ndefaultOptions ->\n    selectOptions ->\n        selectOneOptions\n    insertOptions ->\n        updateOptions ->\n            partialUpdateOptions\n            deleteOptions\n    countOptions\n    aggregateOptions\n    \n```\n\nFor example if you want to define `pre` processor for insert, update, partialUpdate, delete that's enough to define it in your `insertOptions`: \n```\nvar YourController = Restifizer.Controller.extend({\n  ...\n  insertOptions: {\n    pre: function (req, res, next) {\n      ...\n    }\n  }\n```\n\n#### pre\n\n`pre: function (req, res, callback)`\n\n`pre` is a preprocessor that is executed at the begining before any other logic runs. It's a good point to check \npreconditions of your request. For example check if the request is executed by Admin:\n```\n      pre: function (req, res, callback) {\n        // not admin\n        if (!this.isAdmin(req)) {\n          return callback(HTTP_STATUSES.FORBIDDEN.createError());\n        }\n        callback();\n      }\n```\n\n#### collectionPost\n\n`collectionPost: function (collection, req, res, callback)`\n\nWhen `select` or `aggregate` return any collection from db, this collection is passed through this postprocessor. \nIt's a good point if you want to manipulate with the set of items of the collection, but not with items by themselves.\n\n#### post\n\n`post: function (resource, req, res, callback)`\n\n`post` is postprocessor. It runs immediately before a resource is sent to an user. \nAt this point you can change the resource by itself. For instance, you can fill calculated fields here:\n```\n  defaultOptions: function (resource, req, res, callback) {\n    if (resource.icon) {\n      resource.icon_url =\n        req.protocol + \"://\" + req.get('host') + '/api/resource/' + resource._id + '/icon';\n    }\n    callback(null, resource);\n  }\n```\n\n#### queryPipe\n\n`queryPipe: function (query, req, res, callback)`\n\nYou can use `queryPipe` if you need to call additional methods at `mongoose` `query` (http://mongoosejs.com/docs/queries.html).\nThis method is called after all `restifizer` calls are done, but immediately before `exec`.\n\nDraw your attention, this method is called in 2 different semantics: \n* in selects - in this case we expect you call `callback`,\n* in IUD-methods - in this case we expect you directly return `query`.\nIn order to make your method workable in both semantics use the way from example bellow (return and call `callback` at the same line).\n\nSo, in this example we put `populate` to our query pipe:\n```\n    queryPipe: function (query, req, res, callback) {\n      return query.populate(\"fieldToPopulate\", callback);\n    }\n```\n\n### Methods\n\nThere is another way to cusomize the behaviour of your controller. You can override existing `restifizer` methods. \n\n#### prepareData\n\n`prepareData: function (req, res, callback)`\n\nPrepares data to instantinate new document.\nIt's a point you can specify defaults for your resource when `restifizer` creates it. `Callback` reseives 2 params:\n * err - error, or null if there is no error happened,\n * data - object containg default values of resource fields.\n\nDefault implementation uses empty data object (`{}`).\n\n#### assignFields\n\n`assignFields: function (dest, source, req, callback)`\n\nAssigns all fields from `source` to `dest` according `modelFieldNames`.\nYou can fetch any additional data at this point, or completely change the way fields are assigned.\n\nDefault implemenation iterates through all the fields, passing them through `assignFilter`, and calling `assignField`. \n\n#### assignField\n\n`assignField: function (dest, source, fieldName, req, callback)`\n\nAssigns single field with name `fieldName` from `source` to `dest`.\nAt this point you have enough data to deny assigning of exact values to exact fields for instance:\n```\nvar YourController = Restifizer.Controller.extend({\n  assignField: function (dest, source, fieldName, req, callback) {\n    if (fieldName == 'status' && source[fieldName] == STATUSES.RESTRICTED_STATUS) {\n        return callback(HTTP_STATUSES.FORBIDDEN.createError(\"It's not allowable to set restricted status\"));\n    }\n    YourController.__super__.assignField.apply(this, arguments); // do not forget to call supper method\n  },\n});\n```\n\n#### assignFilter\n\n`assignFilter: function (dest, source, fieldName, req)`\n\nFilters assigning field with name `fieldName`.\nIn this method you can synchroniously return `true` / `false`, allowing / denying to assign exact feilds.\nFor example you can silently skip of changing of exact fields for non-admin users:\n```\nvar YourController = Restifizer.Controller.extend({\n  assignFilter: function (dest, source, fieldName, req) {\n    if (fieldName == 'adminOnlyField') {\n      return this.isAdmin(req);\n    }\n    YourController.__super__.assignField.apply(this, arguments);\n  },\n});\n```\n\n#### createDocument\n\n`createDocument: function (data, req, res, callback)`\n\nCreates mongoose document. It's called when you create new instance of your resource after all assignments are already done,\nbut immediately before saving it to your database.\n\n#### updateDocument\n\n`updateDocument: function (doc, req, res, callback)`\n\nHandler, called when you change existing instance of your resource after all assignments are already done, but immediately before saving it to your database\n\n#### saveDocument\n\n`saveDocument: function (doc, req, res, callback)`\n\nSaves document to db, called in inserts and updates, after `createDocument` or `updateDocument`.\n\n### restifizerOptions\n\n`restifizerOptions` allows you to define common options for all the controllers of your app.\n\n#### defaultPerPage\n\nThis value is used in all `select` requests if no `per_page` has been provided. Default value is `25`.\n\n#### maxPerPage\n\nThis value restricts maximum value of `per_page` supported with your app. Default value is `100`.\n\n#### redisKeyPrefix\n\nIt's a prefix you use in the trigger engine. Default value is `trigger`.\n\n## Files\n\nTBD\n\n### converter\n\nTBD\n\n## Trigger engine\n\nTBD\n\n",
  "gitHead": "852ab862040ac55560b3695b26b3c66b32ca0733",
  "_shasum": "ab047ed0e0a06ca48ed2aaf0934d836dee38a6c3"
}
